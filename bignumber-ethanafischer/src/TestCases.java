import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class TestCases {
    private PrintStream old;
    private ByteArrayOutputStream baos;

    @BeforeEach
    public void setUp() {
        this.old = System.out; // Save a reference to the original stdout stream.
        this.baos = new ByteArrayOutputStream();
        PrintStream ps = new PrintStream(baos);
        System.setOut(ps);
    }

    @Test
    public void testInputFile() {
        BigNumArithmetic.main(new String[] { "Input.txt" });
        String output = this.baos.toString().trim().replaceAll("\r\n", "\n");
        assertEquals("0 + 0 = 0\n" +
                "1 + 232 = 233\n" +
                "23456 + 1332 = 24788\n" +
                "9 + 12356843945 = 12356843954\n" +
                "135459999 + 123999 = 135583998\n" +
                "13 * 12 = 156\n" +
                "24534 * 2638781 = 64739853054\n" +
                "789 + 211 = 1000\n" +
                "8 + 9 = 17\n" +
                "999 + 989 = 1988\n" +
                "99999999999 + 789878987898799 = 789978987898798\n" +
                "253456543 * 1434567890 = 363600618098204270\n" +
                "1055 ^ 223 = 153214016704196673630258117634222631577294116472031662780800901945395988216179538026926293275929623199485968226531796949292849159218577220257846846259445378862010082386105050376937598629077494423914859955098985650311285800874275498100498263979622179399559496076342434535323601493720617235989136950146837176789105568194611926850124883990091392905359415321786962895490575466635653325583290171641644458257468965947363371584562806088056897735250377250321133030586431765061513852512130143206336297965522242784046374331462351322139699076549626186884462513856426354465173823436895385478904551416854653474929242620519583003736245301252115610067539019922833176678977906703948974609375\n" +
                "4 ^ 238 = 195109284394749514461349826862072894109287383916560696928697309976585733676235351257519131441468248197489183195087913930965498479955517831643136\n" +
                "420 ^ 69 = 10097201832880355573875790863214833226896186369872326994250398570376877433686009543845316266007917815719968899072000000000000000000000000000000000000000000000000000000000000000000000", output);
    }

    @AfterEach
    public void tearDown() {
        System.out.flush();
        System.setOut(this.old);
    }
}
